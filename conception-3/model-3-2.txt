@startuml
package fr.ul.acl.controller {
class LabyController
}

 package fr.ul.acl.view {
  class Textures << (S,#FF7700) Singleton >>
  Textures "*" <-- Image
   class LabyPainter {
    -int width
    -int height
  }

}
   class Ressources {
    +{static}int WIDTH
    +{static}int HEIGHT
    +{static}int SCALING
    +{static}int scaling(int)
  }

 package fr.ul.acl.engine {
   class GameEngineGraphical
   Interface GamePainter {
    +void draw(BufferedImage)
  }

   Interface GameController
   Enum Cmd
   GameController <|.. LabyController
  GamePainter <|.. LabyPainter
  LabyController -- "1" Cmd
  GameEngineGraphical <-- Laby
  Laby --> Game
  LabyPainter <-- Laby
  LabyController <-- Laby


  class Laby
}
 package fr.ul.acl.model {
  abstract class Composant {
    #int posX
    #int posY
  }
   abstract class Dynamique {
    #void up()
    #void down()
    #void left()
    #void right()
  }
   class Heros {
    +void move(Plateau, Cmd)
  }
 package fr.ul.acl.model.monstres {
  class GestionnaireMonsreIntelligents {
}
  class GestionnaireMonstreAleatoire {
}

  Abstract Class GestionnaireMonstre{
    + void deplacement()
    + ArrayList<int[]>getPosMonstres()
  }

  GestionnaireMonsreIntelligents --|> GestionnaireMonstre
  GestionnaireMonstreAleatoire --|> GestionnaireMonstre

  Interface Algorithme{
    + LinkedList<Cmd> getChemin(Plateau plateau, int Hx, int Hy, int x, int y, String type)
  }

  Algorithme <-- GestionnaireMonsreIntelligents

  Class Aetoile{
  }

  Aetoile --|> Algorithme

  abstract class AbstractMonstre{
    + boolean deplacement(Jeu jeu, Cmd direction)
    + boolean verificationCase(Jeu jeu ,int x,int y)
  }

  class Monstre{
  }

  class Fantome{
  }

  Fantome --|> AbstractMonstre
  Monstre --|> AbstractMonstre

  AbstractMonstre --|> Dynamique
  AbstractMonstre "*" <- GestionnaireMonstre


}

  GestionnaireMonstre  --> "*" Jeu
   class Jeu {
    +int hauteurPlateau()
    +int largeurPlateau()
  }

   class Plateau {
    -int hauteur
    -int largeur   
    +String getTypeCase(int, int)
    +boolean isAccesible(int, int)
  }
   abstract class Statique {
    -String type
    +{abstract} String getAffichage()
    +String getType()
  }
  class Mur
 package fr.ul.acl.model.magique {
  abstract class Magic{
    +effet()
  }

  class Teleport{
    +int posX
    +int posY
  }

  class Trap

  class Treasure

  class Invincible
  }
  class Start
  Composant <|- Dynamique
  Dynamique <|-- Heros
  Statique <|-- Mur
  Composant <|-- Statique
  
  Jeu *- "1" Heros
  Plateau -* Jeu 
  Plateau *- Statique

  Statique <|-- Magic
  Statique <|-- Start
  Magic <|-- Teleport
  Magic <|-- Trap
  Magic <|-- Treasure
  Magic <|-- Invincible


}
   interface Game {
    +void evolve(Cmd)
    +boolean isFinished()
  }
  
 Game <|.. Jeu
 hide empty members
@enduml